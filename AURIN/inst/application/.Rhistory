install.packages("devtools", repos="https://cloud.r-project.org")
devtools::install_deps(".")
install.packages("devtools", repos="https://cloud.r-project.org")
devtools::install_deps(".")
install.packages("devtools", repos = "https://cloud.r-project.org")
########### ----------- Clean all variables -------- #####
rm(list=ls())
library(haven)
library(abind)
install.packages('haven')
install.packages('abind')
install.packages('sjlabelled')
exp(-1.5493)
exp(-1.5493)/(1+exp(-1.5493))
log(1)
0.1/(1-0.1)
log(1/9)
shiny::runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/shiny/AURIN/inst/application')
list(longitudinal = input$longitudinal,
long_waves = input$long_waves, long_topic = input$long_topic,
TSP = input$TSP, TSP_years = input$TSP_years, TSP_variable = input$TSP_variables)
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/shiny/AURIN/inst/application')
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/shiny/AURIN/inst/application')
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/shiny/AURIN/inst/application')
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/shiny/AURIN/inst/application')
params
tempReport
file
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,output_format = 'pdf_document',
params = params,
envir = new.env(parent = globalenv())
)
params
params <- list(year = 2122,
survey = 1212)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,output_format = 'pdf_document',
params = params,
envir = new.env(parent = globalenv())
)
input$longitudinal
params <- list(year = input$longitudinal,
survey = 1212)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,output_format = 'pdf_document',
params = params,
envir = new.env(parent = globalenv())
)
input$long_waves
params <- list(year = input$longitudinal,
survey =  input$long_waves)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,output_format = 'pdf_document',
params = params,
envir = new.env(parent = globalenv())
)
params <- list(longitudinal = input$longitudinal,
survey =  input$long_waves)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,output_format = 'pdf_document',
params = params,
envir = new.env(parent = globalenv())
)
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "report.Rmd")
tempReport
tempReport
file.copy("report.Rmd", tempReport, overwrite = TRUE)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,output_format = 'pdf_document',
params = params,
envir = new.env(parent = globalenv())
)
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "report.Rmd")
file.copy("report.Rmd", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(longitudinal = input$longitudinal,
long_waves = input$long_waves, long_topic = input$long_topic,
TSP = input$TSP, TSP_years = input$TSP_years, TSP_variable = input$TSP_variables)
params <- list(longitudinal = input$longitudinal,
survey =  input$long_waves)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,output_format = 'pdf_document',
params = params,
envir = new.env(parent = globalenv())
)
# Set up parameters to pass to Rmd document
params <- list(longitudinal = input$longitudinal,
long_waves = input$long_waves, long_topic = input$long_topic,
TSP = input$TSP, TSP_years = input$TSP_years, TSP_variable = input$TSP_variables)
params <- list(longitudinal = input$longitudinal,
survey =  input$long_waves)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,output_format = 'pdf_document',
params = params,
envir = new.env(parent = globalenv())
)
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "report.Rmd")
file.copy("report.Rmd", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(longitudinal = input$longitudinal,
long_waves = input$long_waves, long_topic = input$long_topic,
TSP = input$TSP, TSP_years = input$TSP_years, TSP_variable = input$TSP_variables)
params <- list(longitudinal = input$longitudinal,
survey =  input$long_waves)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,output_format = 'pdf_document',
params = params,
envir = new.env(parent = globalenv())
)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,output_format = 'pdf_document',
params = params,
envir = new.env(parent = globalenv())
)
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "report.Rmd")
file.copy("report.Rmd", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(longitudinal = input$longitudinal,
long_waves = input$long_waves, long_topic = input$long_topic,
TSP = input$TSP, TSP_years = input$TSP_years, TSP_variable = input$TSP_variables)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,output_format = 'pdf_document',
params = params,
envir = new.env(parent = globalenv())
)
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/shiny/AURIN/inst/application')
input$TSP_years
input$long_waves
input$long_waves
toString(unique(input$long_waves))
input$long_waves
LSAY_waves
length(input$long_waves)==1
#### ------ Cross sectional ------ #####
if (length(input$long_waves)==1) {
linkage_message = paste0('Cross-sectional: The round (',toString(unique(input$TSP_years)),') of the TSP (2021) was linked with the wave ' ,toString(unique(LSAY_waves)),' of the Longitudinal survey used in the linkage.')
} else {
linkage_message = paste0('Longitudinal: The rounds ',toString(unique(summaryResults[['TSP variables']]$`ABS Year`)),' of the TSP (2021) was linked with the waves: ',toString(unique(input$long_waves)),' of the Longitudinal survey used in the linkage.')
}
length(input$long_waves)==1
linkage_message = paste0('Longitudinal: The rounds ',toString(unique(summaryResults[['TSP variables']]$`ABS Year`)),' of the TSP (2021) was linked with the waves: ',toString(unique(input$long_waves)),' of the Longitudinal survey used in the linkage.')
toString(unique(input$TSP_years))
toString(unique(LSAY_waves))
toString(unique(LSAY_waves))
input$long_waves
toString(unique(input$long_waves))
toString(unique(input$long_waves))
linkage_message = paste0('Cross-sectional: The round (',toString(unique(input$TSP_years)),') of the TSP (2021) was linked with the wave ' ,toString(unique(input$long_waves)),' of the Longitudinal survey used in the linkage.')
linkage_message
linkage_message
message("The Geographical unit used to do the data linkage was SA3 2021. More information about this: https://www.abs.gov.au/statistics/standards/australian-statistical-geography-standard-asgs-edition-3/latest-release")
###### ----- Concordances log -------- ####
message("Concordances: The data linkage use the following concordances: ")
summaryResults
input$long_topic
input$TSP_years
input$TSP_variables
input$input$TSP_variables
for (j in unique(input$TSP_variables)){
message(paste0('- ',j))
}
paste0('- ',j)
paste0('- ',j)
paste0('- ',j, '\n')
paste0(msg3, paste0('- ',j, ' \n'))
msg3 = ""
paste0(msg3, paste0('- ',j, ' \n'))
msg3 = paste0(msg3, paste0('- ',j, ' \n'))
msg3 = ""
for (j in unique(input$TSP_variables)){
msg3 = paste0(msg3, paste0('- ',j, ' \n'))
}
msg3
msg4
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/shiny/AURIN/inst/application')
msg5
msg1
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/shiny/AURIN/inst/application')
shiny::runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/shiny/AURIN/inst/application')
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/shiny/AURIN/inst/application')
tempdir()
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/shiny/AURIN/inst/application')
?zip
tempReportpdf
tempdir()
relativepath = tempdir()
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/shiny/AURIN/inst/application')
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/shiny/AURIN/inst/application')
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/shiny/AURIN/inst/application')
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/shiny/AURIN/inst/application')
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/shiny/AURIN/inst/application')
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/shiny/AURIN/inst/application')
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/shiny/AURIN/inst/application')
shiny::runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/shiny/AURIN/inst/application')
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/shiny/AURIN/inst/application')
shiny::runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/iriss_shiny/AURIN/inst/application')
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/iriss_shiny/AURIN/inst/application')
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/iriss_shiny/AURIN/inst/application')
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/iriss_shiny/AURIN/inst/application')
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/iriss_shiny/AURIN/inst/application')
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/iriss_shiny/AURIN/inst/application')
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/iriss_shiny/AURIN/inst/application')
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/iriss_shiny/AURIN/inst/application')
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/iriss_shiny/AURIN/inst/application')
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/iriss_shiny/AURIN/inst/application')
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/iriss_shiny/AURIN/inst/application')
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/iriss_shiny/AURIN/inst/application')
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/iriss_shiny/AURIN/inst/application')
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/iriss_shiny/AURIN/inst/application')
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/iriss_shiny/AURIN/inst/application')
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/iriss_shiny/AURIN/inst/application')
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/iriss_shiny/AURIN/inst/application')
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/iriss_shiny/AURIN/inst/application')
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/iriss_shiny/AURIN/inst/application')
runApp('Documents/AURIN/1. Projects/IRISS/IRISS_LSAY/iriss_shiny/AURIN/inst/application')
